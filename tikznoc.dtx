% \iffalse meta-comment
%
% Copyright (C) 2014 by Michael Vonbun <m.vonbun@gmail.com>
% ---------------------------------------------------------
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.2
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.2 or later is part of all distributions of LaTeX
% version 1999/12/01 or later.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{tikznoc.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{tikznoc}
%<*package>
    [2021/03/10 v1.8 Draw 2d mesh NoCs using TikZ]
%</package>
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{xkvview}
\usepackage{hyperref}
\usepackage{tikznoc}[2014/08/01]
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{tikznoc.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{899}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2014/08/01}{Initial version}
% \changes{v1.1}{2017/02/03}{Extend documentation}
% \changes{v1.2}{2019/03/18}{Add macro to connect routers by routes}
% \changes{v1.3}{2019/03/27}{Add macro to connect routers by routes based on
% router list}
% \changes{v1.4}{2019/04/03}{Extend supported network size}
% \changes{v1.5}{2019/06/17}{Add star version to tikznocRoute to connect tiles}
% \changes{v1.6}{2019/06/17}{Add options to control the node number text}
% \changes{v1.7}{2019/07/15}{Add option to have edge numbers}
% \changes{v1.8}{2021/03/10}{Add options to scale the routers in size and to
% adjust their distance}
%
% \GetFileInfo{tikznoc.dtx}
%
% \DoNotIndex{%
% \def,\edef,\relax,
% \newcommand,
% \newenvironment,
% \newcount,
% \foreach,\k,\whiledo,
% \newif,\ifcase,\ifnum,\else,\fi,
% \ifthenelse,\OR,\or,\NOT,
% \advance,\divide,\multiply,
% \begin,\end,
% \csname,\endcsname,
% \draw,\path,\RequirePackage,\PackageWarning,\ProcessOptions
% }
%
%
% \title{The \textsf{tikznoc} package\thanks{This document
%   corresponds to \textsf{tikznoc}~\fileversion, dated \filedate.}}
% \author{Michael Vonbun \\ \texttt{m.vonbun@gmail.com}}
%
% \maketitle
%
% \section{Introduction}%
%
% This package uses TikZ to typeset 2D-mesh NoCs in an easy and intuitive way.
% \setkeys[tikznoc]{route}{style, source offset, sink offset}%
% \makeatletter
% \tikznoc@route@sinkoffset
% \makeatother
%
% \section{Macros Provided}%
% \subsection{Main Macros}%
% \DescribeMacro{\tikznoc}
% |\tikznoc|\textless\meta{tikznocKey=Val}\textgreater\oarg{tikzKey=Val}\marg{$m$}\marg{$n$}\\
% Draw an $m$-by-$n$ 2D-mesh, where $m$ and $n$ are the number of rows
% and columns of the 2D-mesh NoC.
%
% \noindent
% \DescribeMacro{\tikznoclink}
% |\tikznoclink|\marg{$rc$}\marg{port}\\
% joins the router with index $rc$ with a neighbor using port
% \{N,E,S,W\}.
%
% \noindent
% \DescribeMacro{\tikznoctile}
% |\tikznoctile|\oarg{tile style}\marg{router index}\\
% Macro to draw a tile at a router.
%
% \noindent
% \DescribeMacro{\tikznoctikznocembed}
% |\tikznocembed|\oarg{}\marg{$r$}\marg{$c$}\\
% Surround a NoC with partly links to indicate it is part of a bigger
% NoC.
%
% \noindent
% \DescribeMacro{\tikznocColorRouters}
% |\tikznocColorRouters|\oarg{seperator}\marg{router indices, separated}\marg{color}\\
% Router coloring macro. The default seperator is |<,>|.
%
% \noindent
% \DescribeMacro{\drawateveryrouter}
% |\drawateveryrouter|\marg{COMMANDS}\\
% Use \emph{before} drawing the mesh to put something at every router.
% Inside the COMMANDS part, local coordinates can (and should) be used.
%
% \noindent
% \DescribeMacro{\drawatrouter}
% |\drawatrouter|\marg{$rc$}\marg{COMMANDS}\\
% Draw something at a specific router.  It works almost as the
% |\drawateveryrouter| macro, but it must not be used before drawing the
% NoC and scaling has to be adjusted by the user.  However, this can be
% done easily with an own scope with equal scaling as the |\tikznoc|
% macro.
%
% \clearpage
% \noindent
% \DescribeMacro{\tikznocRoute} |\tikznocRoute|%
% \oarg{route key-val}\oarg{tikz scope key-val}%
% \marg{source-id}\oarg{*}\oarg{source key-val}%
% \marg{sink-id}\oarg{*}\oarg{sink key-val}\\
% Connect two routers via a route. If the star (*) variant is used, it adds a
% connection to the tiles (source and sink separately) attached as well.
%
% \noindent
% \DescribeMacro{\tikznocPath} |\tikznocRoute|%
% \oarg{*}\oarg{*}\oarg{draw options}%
% \marg{list of router ids}\\
% Connect two routers via a route/path specified by a list of router ids. Using
% the star options controls drawing of the arrow tips. Default (no star) is to
% add the arrow tip only for the last route segment, one star adds arrow tips to
% every route segment (hop), two stars add no tips at all.
%
% \noindent
% \DescribeMacro{\tikznocprintid}
% |\tikznocprintid|\oarg{}\marg{router index}\\
% Print router id.
%
%
% \subsection{Auxiliary Macros}%
% \DescribeMacro{\tikznocsplitid}
% |\tikznocsplitid|\marg{router index}\marg{row index macro name}\marg{column index macro name}\\
% Split the router id into row and column indices and store them in two
% new macros.
%
% \noindent
% \DescribeMacro{\tikznocidtonum}
% |\tikznocidtonum|\oarg{offset}\marg{router index}\marg{number macro name}\\
% Macro to convert router index ($n_{row}n_{col}$) to decimal number and
% store it in a new macro.
%
% \noindent
% \DescribeMacro{\tikznocnumtoid}
% |\tikznocnumtoid|\oarg{first index offset}\marg{router number}\marg{router index
% macro name}\\
% Macro to convert the decimal number of a router to its index
% ($n_{row}n_{col}$) and store it a new macro.
%
%
% \section{Installation}%
%
% Install this package like any other \LaTeX~package.\\
%
% \noindent
% The end of this file contains the installation file (.ins) code in case
% the provided ins-file got lost.\\
%
% \noindent
% For style creation run |latex tikznoc.ins|.
% For doc/manual creation run |latex tikznoc.dtx| afterwards.
%
% \section{Dependencies}%
%
% As of \textsf{tikznoc}~\fileversion~this package depends on
% \begin{itemize}
%    \item \textsf{tikz}
%    \item \textsf{xkeyval}
%    \item \textsf{ifthen}
%    \item \textsf{xstring}
%    \item \textsf{xparse}
% \end{itemize}
%
% \section{Usage}%
%
% % To use the macros described below,
% put |\usepackage{tikznoc}| in your document preamble
% (after you made sure that |tikznoc.sty| can be found by your \LaTeX ~distribution).
%
% \subsection{Package Options}%
%
% \begin{tabular}{ll}%
%   Option & Description \\\hline
%       showid & Puts an ID in the middle of every router \\
%       portnames & Labels to ports of every router, useful only for development \\
%       norouter & Omits drawing of the routers \\
%       nolink & Omits drawing of the links \\
%       doubleEdges & Makes the links double edges \\
%       tightEdges & Uses tight edge style \\
%       looseEdges & Uses loose edge style \\\hline
% \end{tabular}%
%
% \subsection{Style Options}%
%
% The keys are pretty self-explaining. They pretty much correspond to the package options.
% \DescribeMacro{\tikznocset}
% |\tikznocset|\marg{Key=Value}\\
% Main option / interface macro.
% The list of keys is
% \xkvview{family=ctrl}
%
% A note on the number style controls (\texttt{numberSize, numberFont}), the
% well-known standard \LaTeX\ sizes (\emph{tiny, scriptsize, footnotesize, small,
% normalsize, large, Large, LARGE, huge, Huge}) and fonts (\emph{emph, textrm,
% textsf, texttt, textup, textit, textsl, textsc, uppercase, textbf, textmd,
% textlf}) are supported as keys (not commands!).  So, to get tiny bold numbers,
% use:\\
% |\tikznocset{numberSize=tiny,numberFont=textbf}|.
%
%
% \clearpage
% \section{Package Usage Example Gallery}%
%
% \noindent
% \DescribeMacro{\tikznoc}\noindent
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznoc{3}{3}
% \end{tikzpicture}\\
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznoc{3}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\tikznocColorRouters}
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznoc{3}{3}
%   \tikznocColorRouters{02,20}{teal}
%   \tikznocColorRouters{01,11}{lime}
% \end{tikzpicture}\\
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
%   |  \tikznoc{3}{3}| \\
%   |  \tikznocColorRouters{02,20}{teal}| \\
%   |  \tikznocColorRouters{01,11}{lime}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\tikznocRoute}
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznoc{3}{3}
%   \tikznocRoute[direct]{20}{02}
%   \tikznocRoute[xy][>=stealth,lime]{20}[below]{02}[above right]
%   \begin{scope}[route/.append style={dotted,teal}]
%     \tikznocRoute[yx]{20}[left]{02}[above]
%   \end{scope}
% \end{tikzpicture}\\
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
%   |  \tikznoc{3}{3}| \\
%   |  \tikznocRoute[style=direct]{20}{02}| \\
%   |  \tikznocRoute[xy][>=stealth,lime]{20}[below]{02}[above right]| \\
%   |  \begin{scope}[route/.append style={dotted,teal}]| \\
%   |    \tikznocRoute[yx]{20}[left]{02}[above]| \\
%   |  \end{scope}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
% \noindent
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\tikznocPath}
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznoc{3}{3}
%   \tikznocPath{00,01,02,12}
%   \tikznocPath*[dotted,lime]{00,10,20,21,22,12}
%   \tikznocPath**[teal]{00,01,11,12}
% \end{tikzpicture}\\
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
%   |  \tikznoc{3}{3}| \\
%   |\tikznocPath{00,01,02,12}| \\
%   |\tikznocPath*[dotted,lime]{00,10,20,21,22,12}| \\
%   |\tikznocPath**[teal]{00,01,11,12}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\tikznocset}
% \begin{minipage}[t]{.3\linewidth}
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznocset{tile}
%   \tikznoc{3}{3}
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}[t]{.7\linewidth}
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{tile}| \\
% |  \tikznoc{3}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\tikznocset}
% \DescribeMacro{\tikznocRoute}
% \begin{minipage}[t]{.3\linewidth}
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznocset{tile}
%   \tikznoc{3}{3}
%   \tikznocRoute[xy][teal]{00}*[below left]{11}
%   \tikznocRoute[xy][lime]{20}*{22}*
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}[t]{.7\linewidth}
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{tile}| \\
% |  \tikznoc{3}{3}| \\
% |  \tikznocRoute[xy][teal]{00}*[below left]{11}| \\
% |  \tikznocRoute[xy][lime]{20}*{22}*| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\tikznoctile}
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznoc{3}{3}
%   \tikznoctile{00}
%   \tikznoctile[fill=lime]{11}
% \end{tikzpicture}\\
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
%   |  \tikznoc{3}{3}| \\
%   |  \tikznoctile{00}| \\
%   |  \tikznoctile[fill=lime]{11}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\tikznocembed}
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznoc{3}{3}
%   \tikznocembed{3}{3}
% \end{tikzpicture}\\
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
%   |  \tikznoc{3}{3}| \\
%   |  \tikznocembed{3}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{enumEdges}
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznocset{enumEdges}
%   \tikznoc{3}{3}
% \end{tikzpicture}\\
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
%   | \tikznocset{enumEdges}| \\
%   |  \tikznoc{3}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\drawateveryrouter}
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \drawateveryrouter{\draw[fill=lime] (useC) ++(0.125,-0.125) circle(0.05);}
%   \tikznoc{3}{3}
% \end{tikzpicture}\\
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
%   |  \drawateveryrouter{\draw[fill=lime] (useC)|\\
%   |    ++(0.125,-0.125) circle(0.05);}| \\
%   |  \tikznoc{3}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\
% This macro is aware of the scaling options of |\tikznoc|.\\[2ex]
%
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\drawatrouter}
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznoc{3}{3}
%   \drawatrouter{11}{\draw[fill=lime] (useC) ++(-0.125,-0.125) circle(0.05);}%
% \end{tikzpicture}\\
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
%   |  \tikznoc{3}{3}| \\
%   |  \drawatrouter{11}{\draw[fill=lime] (useC)| \\
%   |    ++(-0.125,-0.125) circle(0.05);}| \\
% |\end{tikzpicture}|
% \end{minipage}\\
% This macro is aware of the scaling options of |\tikznoc|.\\[2ex]
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\tikznocset}
% \DescribeMacro{\tikznoclink}
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznocset{link=false,showid}
%   \tikznoc[scale=1.5]{2}{2}
%   \tikznoclink{00}{S}
%   \tikznoclink{11}{W}
% \end{tikzpicture}
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{link=false,showid}| \\
% |  \tikznoc[scale=1.5]{2}{2}| \\
% |  \tikznoclink{00}{S}| \\
% |  \tikznoclink{11}{W}| \\
% |\end{tikzpicture}|
% \end{minipage}\\
%
%
% \noindent
% \DescribeMacro{\tikznoc}
% \DescribeMacro{\tikznocset}
% \begin{minipage}[t]{0.3\textwidth}%
% Figure:\\[2ex]
% \begin{tikzpicture}[thick]%
%   \tikznocset{colSepScale=1.5, widthScale=1.25}
%   \tikznoc<rowSepScale=0.75, heightScale=0.75>{2}{2}
% \end{tikzpicture}
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.7\textwidth}%
% Code:\\[2ex]
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{colSepScale=1.5, widthScale=1.25}| \\
% |  \tikznoc<rowSepScale=0.75, heightScale=0.75>{2}{2}| \\
% |\end{tikzpicture}|
% \end{minipage}
%
%
%
% \clearpage
%
% \section{Macro Usage Details}
% \subsection{Details on the router}
% \paragraph{Router Dimensions}
% The spacing of the routers is 1 TikZ-Unit (1 cm), if no scaling is used:
% \begin{center}%
% \begin{tikzpicture}[thick]%
%   \tikznoc{2}{3}
%   \draw[<->] (0,-0.25) -- node[below] {1 cm} ++(1,0);
%   \draw[<->] (-0.25,0) -- node[left] {1 cm} ++(0,1);
% \end{tikzpicture}
% \end{center}
%
% \paragraph{Router IDs / Indices}
% Every router gets an id of the form $n_rn_c$, i.e. RowColumn, starting from
% the top-left corner at index $00$ to the bottom-right corner with index
% $(N_r-1)(N_c-1)$:
% \begin{center}%
% \begin{tikzpicture}[thick]%
%   \tikznoc{2}{3}
%   \path (r00c) node {00} (r12c) node {12};
% \end{tikzpicture}
% \end{center}
%
%
% \paragraph{Router Named Coordinates} Based on the router index, every router
% defines some global and local coordinates.
% \begin{center}%
% \begin{tikzpicture}[thick]%
%   \tikznocset{link=false,portnames}
%   \tikznoc[scale=2.5]{1}{1}
% \end{tikzpicture}
% \end{center}
% The global ones are |rRowCol{c,n,e,s,w,ne,nw,se,sw}|, that is, the letter |r|,
% followed by the router index (RowColumn) and the port identifier in lowercase
% letters.
%
% The local ones are |use{C,N,E,S,W,NE,NW,SE,SE}|, that is, the keyword |use|,
% followed by the port identifier in uppercase letters.  These local coordinates
% are useful only within the |\drawatXrouter| command definition (see below).
%
%
% \clearpage
% \subsection{The Interface}
% \DescribeMacro{\tikznocset}
% |\tikznocset|\marg{Key=Value}
% is the main option / interface macro.
% The list of keys is
% \xkvview{family=ctrl}
%
%
% The keys are pretty self-explaining. They pretty much correspond to the
% package options.  The result of each option is typeset here (same order as
% table).\\[2ex]
%
% \begin{minipage}{.3\linewidth}
%   \begin{tikzpicture}[thick]%
%     \tikznocset{router=false}
%     \tikznoc{2}{2}
%   \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}{.7\linewidth}
%   |\begin{tikzpicture}[thick]%| \\
%   |  \tikznocset{router=false}| \\
%   |  \tikznoc{2}{2}| \\
%   |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
% \begin{minipage}{.3\linewidth}
% \begin{tikzpicture}[thick]%
%   \tikznocset{showid}
%   \tikznoc{2}{3}
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}{.7\linewidth}
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{showid}| \\
% |  \tikznoc{2}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
% \begin{minipage}{.3\linewidth}
% \begin{tikzpicture}[thick]%
%   \tikznocset{shownumber}
%   \tikznoc{2}{3}
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}{.7\linewidth}
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{shownumber}| \\
% |  \tikznoc{2}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
% \begin{minipage}{.3\linewidth}
% \begin{tikzpicture}[thick]%
%   \tikznocset{portnames}
%   \tikznoc{1}{1}
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}{.7\linewidth}
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{portnames}| \\
% |  \tikznoc{1}{1}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
% \begin{minipage}{.3\linewidth}
% \begin{tikzpicture}[thick]%
%   \tikznocset{link=false}
%   \tikznoc{2}{3}
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}{.7\linewidth}
% |\begin{tikzpicture}[thick]%|
%   |\tikznocset{link=false}| \\
%   |\tikznoc{2}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
% \begin{minipage}{.3\linewidth}
% \begin{tikzpicture}[thick]%
%   \tikznocset{doubleEdges}
%   \tikznoc{2}{3}
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}{.7\linewidth}
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{doubleEdges}| \\
% |  \tikznoc{2}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
% \begin{minipage}{.3\linewidth}
% \begin{tikzpicture}[thick]%
%   \tikznocset{tile}
%   \tikznoc{2}{3}
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}{.7\linewidth}
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{tile}| \\
% |  \tikznoc{2}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
% \begin{minipage}{.3\linewidth}
% \begin{tikzpicture}[thick]%
%   \tikznocset{tile,connectTile=false}
%   \tikznoc{2}{3}
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}{.7\linewidth}
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{tile,connectTile=false}| \\
% |  \tikznoc{2}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
% \begin{minipage}{.3\linewidth}
% \begin{tikzpicture}[thick]%
%   \tikznocset{edgeStyle=loose}
%   \tikznoc{2}{3}
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}{.7\linewidth}
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznocset{edgeStyle=loose}| \\
% |  \tikznoc{2}{3}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
% The |numRow| and |numCol| keys are used internally only.
%
%
% \paragraph{A note on edges}
% There are 4 possible edge styles, combining 2 edge properties: |doubleEdges|
% and |loose|/|tight|-style.  Those four combinations are showd here.\\[2ex]
% \noindent
% \begin{minipage}{.475\linewidth}
% \begin{tikzpicture}[thick]%
%   \tikznocset{edgeStyle=tight}
%   \tikznoc[scale=1.5]{2}{2}
%   \tikznocset{edgeStyle=loose}
%   \tikznoc[scale=1.5,xshift=2cm]{2}{2}
%   \tikznocset{edgeStyle=tight,doubleEdges=true}
%   \tikznoc[scale=1.5,yshift=-2cm]{2}{2}
%   \tikznocset{edgeStyle=loose,doubleEdges=true}
%   \tikznoc[scale=1.5,xshift=2cm,yshift=-2cm]{2}{2}
% \end{tikzpicture}
% \end{minipage}\hfill
% \begin{minipage}{.475\linewidth}
%   |\begin{tikzpicture}[thick]%| \\
%   |  \tikznocset{edgeStyle=tight}| \\
%   |  \tikznoc[scale=1.5]{2}{2}| \\
%   |  \tikznocset{edgeStyle=loose}| \\
%   |  \tikznoc[scale=1.5,xshift=2cm]{2}{2}| \\
%   |  \tikznocset{edgeStyle=tight,doubleEdges=true}| \\
%   |  \tikznoc[scale=1.5,yshift=-2cm]{2}{2}| \\
%   |  \tikznocset{edgeStyle=loose,doubleEdges=true}| \\
%   |  \tikznoc[scale=1.5,xshift=2cm,yshift=-2cm]{2}{2}| \\
% |\end{tikzpicture}|
% \end{minipage}\\[2ex]
%
% \clearpage
%
% \subsection{The tikznoc Macro}
% The optional argument takes a KeyValue list and passes these to the underlying
% TikZ layer.  Thus, only TikZ keys should be used.  Using this mechanism allows
% for easy customization:
%
% \begin{minipage}[t]{0.45\textwidth}%
% Example: \\
% \begin{tikzpicture}[thick]%
%   \tikznoc[color=red]{2}{2}
%   \tikznoc[scale=2,xshift=1cm,yshift=-0.5cm]{2}{2}
% \end{tikzpicture}
% \end{minipage}
% \hfill
% \begin{minipage}[t]{0.45\textwidth}%
% Code: \\
% |\begin{tikzpicture}[thick]%| \\
% |  \tikznoc[color=red]{2}{2}| \\
% |  \tikznoc[scale=2,xshift=1cm,yshift=-0.5cm]{2}{2}| \\
% |\end{tikzpicture}|
% \end{minipage}
%
%
% \subsection{The drawatrouter Macros}
% \DescribeMacro{\drawateveryrouter} |\drawateveryrouter|\marg{COMMANDS} Allows
% to draw something at every router. Used before the main |\tikznoc| macro.
%
% \DescribeMacro{\drawatrouter} |\drawatrouter|\marg{$n_rn_c$}\marg{COMMANDS}
% Allows to draw in a router. Used after the main |\tikznoc| macro.\\
%
% \noindent
% \textbf{Example}\\
% |\draw[fill=lime] (useC) ++(0.125,-0.125) circle(0.05);| \\
% draws a circle, filled with green, in every lower right corner of the router
% (left without scope adjusting, right enclosed with a scope with adjusted scale
% option):
% \begin{center}%
% \begin{tikzpicture}[thick]%
% \tikznoc[scale=2]{2}{3}
% \drawatrouter{11}{\draw[fill=lime] (useC) ++(-0.125,-0.125) circle(0.05);}
% \end{tikzpicture}
% \hfill
% \begin{tikzpicture}[thick]%
% \tikznoc[scale=2]{2}{3}
% \begin{scope}[scale=2]
% \drawatrouter{11}{\draw[fill=lime] (useC) ++(-0.125,-0.125) circle(0.05);}
% \end{scope}
% \end{tikzpicture}
% \end{center}
%
%
% \subsection{The Tiles}
% Tiles are either set globally using the |\tikznocset{tile=true}| option, or
% using the macro |\tikznoctile{router-id}|.
%
% Tiles use the TikZ-style |tile|, feel free to change / append to this style.
% By default, the |tile| style is defined as:\\
% |\tikzset{tile/.style={draw,circle,minimum size=0.5cm},router/.style={}}|
%
% \clearpage
% \subsection{Connect Routers via Routes}
% The routes have their own key-val system.
% \xkvview{family=route}
%
% \noindent
% \DescribeMacro{\tikznocRoute}
% |\tikznocRoute|\oarg{key-val}\marg{src-id}\marg{sink-id}\\
% Connects two routers via a route.  An alias system is used to specify the
% coordinates of start and end of the route.  The reference point of an alias is
% the center of the router.  The list of known alias is \\
% |none, above, below, left, right, above left, above right, below left, below right|.
%
%
% \paragraph{Controlling the Offset Amount} To control the size of the offset of
% the alias / anchors you can use
% \begin{itemize}
%   \item |offset=dim| to set all offsets at once to one common value,
%   \item |xoffset=dim| and |yoffset=dim| to set the horizontal and vertical
%     offset separately,
%   \item |xsrcoffset=dim|, |ysrcoffset=dim|, |xsinkoffset=dim|, and
%     |ysinkoffset=dim| to set all offsets individually.
% \end{itemize}
%
% \paragraph{Controlling the Route Taken} The routes themselves are set using
% the |style| key.  Known routes are |xy, yx, direct|.
%
% \clearpage
%
%
% \StopEventually{}
%
% \section{Implementation}%
%
% \subsection{Load Dependencies}%
%    \begin{macrocode}
\RequirePackage{tikz}%
\RequirePackage{xkeyval}%
\RequirePackage{ifthen}%
\RequirePackage{xstring}%
\RequirePackage{xparse}%
%    \end{macrocode}
%
% \subsection{Key-Val Interface}%
%
% Boolean conditionals that control what basic entities are shown.\\
% |showid| puts the router id in the middle of the router.\\
% |portnames| labels the ports of each router, that is the coordinates
% that are defined per router.\\
% |router| controls if the routers are drawn at all.\\
% |link| controls if links are typeset.\\
% |doubleEdge| controls the edge style.\\
% |tile| controls typesetting of compute tiles.\\
% |connectTile| controls if tiles are connected to the routers.\\
%    \begin{macrocode}
\define@boolkeys[tikznoc]{ctrl}{router,showid,shownumber,portnames}[true]%
\define@boolkeys[tikznoc]{ctrl}{link,doubleEdges,enumEdges}[true]%
\define@boolkeys[tikznoc]{ctrl}{tile,connectTile}[true]%
%    \end{macrocode}
%
% Double edge style keyval macro. Two options, tight and loose.
% Define the choicekey.
%    \begin{macrocode}
\define@choicekey*[tikznoc]{ctrl}{edgeStyle}[\val\nr]{loose,tight}[tight]{%
%    \end{macrocode}
%
% If tight option is provided, the link macro should use the node coordinate node.center,
% otherwise the node coordinate itself is used.
%    \begin{macrocode}
  \ifcase\nr\relax
    \def\tikznoc@ctrl@cmd@edgeStyle{}%
  \or
    \def\tikznoc@ctrl@cmd@edgeStyle{.center}%
  \fi
}%
%    \end{macrocode}
%
% Global number of rows and number of column macros.
%    \begin{macrocode}
\define@cmdkeys[tikznoc]{ctrl}{numRow,numCol}%
%    \end{macrocode}
%
% Global router number seperator.
%    \begin{macrocode}
\define@cmdkeys[tikznoc]{ctrl}{numSep}%
\setkeys[tikznoc]{ctrl}{numSep={}}%
%    \end{macrocode}
%
%
% Assign default here, thus the link macro does not use an undefined macro.
%    \begin{macrocode}
\setkeys[tikznoc]{ctrl}{edgeStyle=tight}%
%    \end{macrocode}
%
%
% Add options for scaling.
% First are scaling factors the router distance, i.e. the rows and columns. Also
% set their defaults.
%    \begin{macrocode}
\define@cmdkey[tikznoc]{ctrl}{rowSepScale}[1]{}%
\define@cmdkey[tikznoc]{ctrl}{colSepScale}[1]{}%
\define@cmdkey[tikznoc]{ctrl}{sepScale}[1]{\setkeys[tikznoc]{ctrl}{rowSepScale=#1,colSepScale=#1}}%
\setkeys[tikznoc]{ctrl}{sepScale}%
%    \end{macrocode}
%
% Next is the router size. Also set their defaults.
%    \begin{macrocode}
\define@cmdkey[tikznoc]{ctrl}{width}[0.5]{}%
\define@cmdkey[tikznoc]{ctrl}{height}[0.5]{}%
\define@cmdkey[tikznoc]{ctrl}{size}[0.5]{\setkeys[tikznoc]{ctrl}{width=#1,height=#1}}%
\define@cmdkey[tikznoc]{ctrl}{widthScale}[1]{}%
\define@cmdkey[tikznoc]{ctrl}{heightScale}[1]{}%
\define@cmdkey[tikznoc]{ctrl}{sizeScale}[1]{\setkeys[tikznoc]{ctrl}{widthScale=#1,heightScale=#1}}%
\setkeys[tikznoc]{ctrl}{size,sizeScale}%
%    \end{macrocode}
%
%
% Define TikZ styles used here.
%    \begin{macrocode}
\tikzset{tile/.style={draw,circle,minimum size=0.5cm},router/.style={}}%
%    \end{macrocode}
%
%
% Set defaults here, i.e. only set drawing of routers and links to be <true> by default
% (conditionals are always intialized <false>)
%    \begin{macrocode}
\setkeys[tikznoc]{ctrl}{router,link,connectTile,enumEdges=false}%
%    \end{macrocode}
%
% Provide basic interface macro.
% \begin{macro}{\tikznocset}
%    \begin{macrocode}
\newcommand{\tikznocset}[2][]{\setkeys*[tikznoc]{ctrl}{#2}}%
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Package Options}%
%
% Add a package option for every Boolean conditional to switch default behavior.
%    \begin{macrocode}
\DeclareOption{showid}{\setkeys[tikznoc]{ctrl}{showid=true}}%
\DeclareOption{shownumber}{\setkeys[tikznoc]{ctrl}{shownumber=true}}%
\DeclareOption{portnames}{\setkeys[tikznoc]{ctrl}{portnames=true}}%
\DeclareOption{norouter}{\setkeys[tikznoc]{ctrl}{router=false}}%
\DeclareOption{nolink}{\setkeys[tikznoc]{ctrl}{link=false}}%
\DeclareOption{doubleEdges}{\setkeys[tikznoc]{ctrl}{doubleEdges=true}}%
\DeclareOption{enumEdges}{\setkeys[tikznoc]{ctrl}{enumEdges=true}}%
\DeclareOption{tightEdges}{\setkeys[tikznoc]{ctrl}{edgeStyle=tight}}%
\DeclareOption{looseEdges}{\setkeys[tikznoc]{ctrl}{edgeStyle=loose}}%
\DeclareOption{tile}{\setkeys[tikznoc]{ctrl}{tile=true}}%
\DeclareOption{disconnectTiles}{\setkeys[tikznoc]{ctrl}{connectTile=false}}%
\ProcessOptions\relax
%    \end{macrocode}
%
%
% \subsection{Auxiliary Commands, Counters, and Stuff}%
%
% Define row and column counters for main macro and initialize them to 0.
%    \begin{macrocode}
\newcount\tikznocNumberOfRows\tikznocNumberOfRows=0%
\newcount\tikznocNumberOfColumns\tikznocNumberOfColumns=0%
%    \end{macrocode}
%
% Define index counters for link macro.
%    \begin{macrocode}
\newcount\tikznoclinkToRowIndex%
\newcount\tikznoclinkToColumnIndex%
%    \end{macrocode}
%
% Define linear index counters for routers, links, and edge macro.
%    \begin{macrocode}
\newcount\tikznocRouterNumber\tikznocRouterNumber=0%
\newcount\tikznocLinkNumber\tikznocLinkNumber=0%
\newcount\tikznocEdgeNumber\tikznocEdgeNumber=0%
%    \end{macrocode}
%
% Internal interface macro for easy access to all routers.
%    \begin{macrocode}
\def\tikznoc@draw@at@every@router{}%
%    \end{macrocode}
%
%
% \subsection{Main NoC-Draw Macros}%
%
% Main noc generation command.\\
% Syntax: |\tikznoc|\oarg{tikzKey=Val}\marg{r}\marg{c}
% \begin{macro}{\tikznoc}
%    \begin{macrocode}
\DeclareDocumentCommand{\tikznoc}{ d<> O{} m O{\cmdtikznoc@ctrl@numSep} m }{%
%    \end{macrocode}
%
% Add option interface.
%    \begin{macrocode}
\IfNoValueF{#1}{\setkeys[tikznoc]{ctrl}{#1}}%
%    \end{macrocode}
%
% Define some aliases.
%    \begin{macrocode}
\def\tikznoc@width{\cmdtikznoc@ctrl@widthScale*\cmdtikznoc@ctrl@width}%
\def\tikznoc@height{\cmdtikznoc@ctrl@heightScale*\cmdtikznoc@ctrl@height}%
\def\tikznoc@halfWidth{0.5*\tikznoc@width}%
\def\tikznoc@halfHeight{0.5*\tikznoc@height}%
\def\tikznoc@colSep{\cmdtikznoc@ctrl@colSepScale}%
\def\tikznoc@rowSep{\cmdtikznoc@ctrl@rowSepScale}%
%    \end{macrocode}
%
% Check if both arguments are numbers and greater than 0,
% 0 rows or columns are nonsense. If so, first store their values.
%    \begin{macrocode}
\ifthenelse{#3=0 \OR #5=0}{}{%
\def\tikznoc@global@numrow{#3}%
\def\tikznoc@global@numcol{#5}%
\def\tikznoc@global@numsep{#4}%
%    \end{macrocode}
%
% Next check for optional input and set the options accordingly. Unknown
% keys are stored in |\XKV@rm| and are passed as argument to the network
% scope.
% Seems not to work well with the scope...
%    \begin{macrocode}
% \tikznocset{#2}%
% \edef\tikznoc@scopeCommands{\XKV@rm}%
% \tikzset{tikznocScopeCommand/.style={\XKV@rm}}%
%    \end{macrocode}
%
% Reset the router counters for row, column, and number. Optionally, also reset
% the edge number counter.
%    \begin{macrocode}
\tikznocNumberOfRows=0%
\tikznocNumberOfColumns=0%
\tikznocRouterNumber=0%
\iftikznoc@ctrl@enumEdges
  \tikznocEdgeNumber=0%
\fi
%    \end{macrocode}
%
% Enclose the noc in its own scope.
%    \begin{macrocode}
\begin{scope}[#2]%[{tikznocScopeCommand}]%[\tikznoc@scopeCommands]
%    \end{macrocode}
%
% Start two TeX loops going from 0 to numRows-1 / numCols-1.
%    \begin{macrocode}
\whiledo{\the\tikznocNumberOfRows < #3}{%
  \whiledo{\the\tikznocNumberOfColumns < #5}{%
%    \end{macrocode}
%
% Increase the router number.
%    \begin{macrocode}
     \advance\tikznocRouterNumber by 1
%    \end{macrocode}
%
% Draw the routers if boolean is true.
%    \begin{macrocode}
      \iftikznoc@ctrl@router
        \draw (\tikznoc@colSep*\the\tikznocNumberOfColumns,-\tikznoc@rowSep*\the\tikznocNumberOfRows) %
        rectangle ++( \tikznoc@width, \tikznoc@height);%
      \fi
%    \end{macrocode}
%
% Setup the global router coordinates,
% they are rRCP, with R: row index, C: column index, P: port, which can be
% c (center),
% sw (south-west or bottom-left corner)
% s (south or bottom)
% sw (south-east or bottom-right corner)
% e (east or right)
% ne (north-east or top-right corner)
% n (north or top)
% nw (north-west or top-left corner)
% w (west or left)
% Additionally, the coordinates useP are defined and overwritten in each iteration.
% However, use these coordinates to draw locally only at the current router.
%    \begin{macrocode}
      \path (%
        +\tikznoc@colSep*\the\tikznocNumberOfColumns,%
        -\tikznoc@rowSep*\the\tikznocNumberOfRows) %
        ++( \tikznoc@halfWidth, \tikznoc@halfHeight) coordinate[alias=useC]
        (r\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns c);%
      \path (%
        +\tikznoc@colSep*\the\tikznocNumberOfColumns,%
        -\tikznoc@rowSep*\the\tikznocNumberOfRows) %
                        coordinate[alias=useSW] (r\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns sw)%
        ++( \tikznoc@halfWidth, 0)
          coordinate[alias=useS]
          (r\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns s)%
        ++( \tikznoc@halfWidth, 0)
          coordinate[alias=useSE]
          (r\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns se)%
        ++( 0                 , \tikznoc@halfHeight)
          coordinate[alias=useE]
          (r\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns e)%
        ++( 0                 , \tikznoc@halfHeight)
          coordinate[alias=useNE]
          (r\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns ne)%
        ++(-\tikznoc@halfWidth, 0)
          coordinate[alias=useN]
          (r\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns n)%
        ++(-\tikznoc@halfWidth, 0)
          coordinate[alias=useNW]
          (r\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns nw)%
        ++( 0                 ,-\tikznoc@halfHeight)
          coordinate[alias=useW]
          (r\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns w)%
      ;%
%    \end{macrocode}
%
% The external |draw-at-every| command is put in here.
%    \begin{macrocode}
      \tikznoc@draw@at@every@router
%    \end{macrocode}
%
% Print router ids at the center if boolean is true.
%    \begin{macrocode}
  \tikznocprintid{\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns}%
%    \end{macrocode}
%
% Print port names if boolean is true. % FIXME: put in own macro
%    \begin{macrocode}
\iftikznoc@ctrl@portnames
  \path
    (useC)  node              {C}%
    (useSW) node[below left]  {SW}%
    (useS)  node[below]       {S}%
    (useSE) node[below right] {SE}%
    (useE)  node[right]       {E}%
    (useNE) node[above right] {NE}%
    (useN)  node[above]       {N}%
    (useNW) node[above left]  {NW}%
    (useW)  node[left]        {W}%
  ;
\fi
%    \end{macrocode}
%
%
% Draw the links. In the 2D-mesh the edge routers do not have all 4
% connections.
% Join the rows, from a row below to a row above (north orientation);
% start with row with index 1 to omit putting edges to the bottom-row of the network.
% Join the columns, same as before, this time we join to the left (west orientation).
%    \begin{macrocode}
      \iftikznoc@ctrl@link
         \ifnum\the\tikznocNumberOfRows>0
            \tikznoclink{\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns}{N}%
         \fi
         \ifnum\the\tikznocNumberOfColumns>0
            \tikznoclink{\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns}{W}%
         \fi
      \fi
%    \end{macrocode}
%
%
% Draw the tiles.
%    \begin{macrocode}
\iftikznoc@ctrl@tile
  \tikznoctile{\the\tikznocNumberOfRows\tikznoc@global@numsep\the\tikznocNumberOfColumns}%
\fi
%    \end{macrocode}
%
%
% Close the loops by advancing the internal counters.
%    \begin{macrocode}
  \advance\tikznocNumberOfColumns by 1
  }%
\advance\tikznocNumberOfRows by 1
\tikznocNumberOfColumns=0
}%
%    \end{macrocode}
%
%
% End the tikz scope and the initial "`IF"' that checks for valid input.
%    \begin{macrocode}
\end{scope}
}%
%    \end{macrocode}
%
% Reset the external interface function and terminate the macro.
%    \begin{macrocode}
\def\tikznoc@draw@at@every@router{}%
}%
%    \end{macrocode}
% \end{macro}
%
%
%
% \section{Auxiliary Macros}
% Define some auxiliary macros here.
%
%
% Macro to draw the links.\\
% Syntax: |\tikznoclink|\oarg{router index}\oarg{port to use}
% \begin{macro}{\tikznoclink}
%    \begin{macrocode}
\newcommand{\tikznoclink}[3][]{%
%    \end{macrocode}
%
% 'Parse' input by breaking the indices in two parts.
%    \begin{macrocode}
\tikznocsplitid{#2}{tikznoclinkFromRowIndex}{tikznoclinkFromColumnIndex}%
%    \end{macrocode}
%
% Copy the splitted parts also to the <TO> counters.
%    \begin{macrocode}
\tikznoclinkToRowIndex=\tikznoclinkFromRowIndex
\tikznoclinkToColumnIndex=\tikznoclinkFromColumnIndex
%    \end{macrocode}
%
% Conditionally set the to coordinates and the outgoing port.
% The 'Offset' variables are for the 'doubleEdges' option.
%    \begin{macrocode}
\ifthenelse{\equal{#3}{N}}{%
  \advance\tikznoclinkToRowIndex by -1
  \def\tikznoclinkFromPort{n}%
  \def\tikznoclinkToPort{s}%
  \def\tikznoclinkOffsetTop{left}%
  \def\tikznoclinkOffsetBot{right}%
  \def\tikznocEdgeLabelOffsetX{0.75}%
  \def\tikznocEdgeLabelOffsetY{0}%
}{}%
\ifthenelse{\equal{#3}{E}}{%
  \advance\tikznoclinkToColumnIndex by 1
  \def\tikznoclinkFromPort{e}%
  \def\tikznoclinkToPort{w}%
  \def\tikznoclinkOffsetTop{above}%
  \def\tikznoclinkOffsetBot{below}%
  \def\tikznocEdgeLabelOffsetX{0}%
  \def\tikznocEdgeLabelOffsetY{0.75}%
}{}%
\ifthenelse{\equal{#3}{S}}{%
  \advance\tikznoclinkToRowIndex by 1
  \def\tikznoclinkFromPort{s}%
  \def\tikznoclinkToPort{n}%
  \def\tikznoclinkOffsetTop{right}%
  \def\tikznoclinkOffsetBot{left}%
  \def\tikznocEdgeLabelOffsetX{0.75}%
  \def\tikznocEdgeLabelOffsetY{0}%
}{}%
\ifthenelse{\equal{#3}{W}}{%
  \advance\tikznoclinkToColumnIndex by -1
  \def\tikznoclinkFromPort{w}%
  \def\tikznoclinkToPort{e}%
  \def\tikznoclinkOffsetTop{below}%
  \def\tikznoclinkOffsetBot{above}%
  \def\tikznocEdgeLabelOffsetX{0}%
  \def\tikznocEdgeLabelOffsetY{0.75}%
}{}%
%    \end{macrocode}
%
% Draw the edges.
% Double directed edge.
%    \begin{macrocode}
\iftikznoc@ctrl@doubleEdges
  \path
    (r\tikznoclinkFromRowIndex\tikznoclinkFromColumnIndex\tikznoclinkFromPort) node[\tikznoclinkOffsetTop] (ft) {}%
    (r\tikznoclinkFromRowIndex\tikznoclinkFromColumnIndex\tikznoclinkFromPort) node[\tikznoclinkOffsetBot] (fb) {}%
    (r\the\tikznoclinkToRowIndex\the\tikznoclinkToColumnIndex\tikznoclinkToPort) node[\tikznoclinkOffsetTop] (tt) {}%
    (r\the\tikznoclinkToRowIndex\the\tikznoclinkToColumnIndex\tikznoclinkToPort) node[\tikznoclinkOffsetBot] (tb) {}%
  ;%
  \iftikznoc@ctrl@enumEdges
    \draw[->] (ft\tikznoc@ctrl@cmd@edgeStyle) --
      node[xshift=\tikznocEdgeLabelOffsetX ex, yshift=\tikznocEdgeLabelOffsetY ex]
      {\scriptsize\the\tikznocEdgeNumber} (tt\tikznoc@ctrl@cmd@edgeStyle);%
    \advance\tikznocEdgeNumber 1\relax%
    \draw[<-] (fb\tikznoc@ctrl@cmd@edgeStyle) --
      node[xshift=-\tikznocEdgeLabelOffsetX ex, yshift=-\tikznocEdgeLabelOffsetY ex]
      {\scriptsize\the\tikznocEdgeNumber} (tb\tikznoc@ctrl@cmd@edgeStyle);%
    \advance\tikznocEdgeNumber 1\relax%
  \else
    \draw[->] (ft\tikznoc@ctrl@cmd@edgeStyle) -- (tt\tikznoc@ctrl@cmd@edgeStyle);%
    \draw[<-] (fb\tikznoc@ctrl@cmd@edgeStyle) -- (tb\tikznoc@ctrl@cmd@edgeStyle);%
  \fi
\else
%    \end{macrocode}
%
% Undirected edge.
%    \begin{macrocode}
  \path (r\tikznoclinkFromRowIndex\tikznoclinkFromColumnIndex\tikznoclinkFromPort) node (from) {}%
    (r\the\tikznoclinkToRowIndex\the\tikznoclinkToColumnIndex\tikznoclinkToPort) node (to) {};%
  \iftikznoc@ctrl@enumEdges
    \draw (from\tikznoc@ctrl@cmd@edgeStyle) --
      node[xshift=\tikznocEdgeLabelOffsetX ex, yshift=\tikznocEdgeLabelOffsetY ex]
      {\scriptsize\the\tikznocEdgeNumber} (to\tikznoc@ctrl@cmd@edgeStyle);%
    \advance\tikznocEdgeNumber 1\relax%
  \else
    \draw (from\tikznoc@ctrl@cmd@edgeStyle) -- (to\tikznoc@ctrl@cmd@edgeStyle);%
  \fi
\fi
}
%    \end{macrocode}
% \end{macro}
%
%
% Macro to split the router id into row and column indices.\\
% Syntax: |\tikznocsplitid|\marg{router index}\marg{row index
% macro name}\marg{column index macro name}
% \begin{macro}{\tikznocsplitid}
%    \begin{macrocode}
\newcommand{\tikznocsplitid}[4][]{%
%    \end{macrocode}
% Based on the number of rows, tell the macro where the first index ends.
%    \begin{macrocode}
\ifthenelse{\tikznoc@global@numrow < 10}{%
  \def\tikznoc@split@at{1}%
}{%
  \ifthenelse{\tikznoc@global@numrow < 100}{%
    \def\tikznoc@split@at{2}%
  }{%
    \ifthenelse{\tikznoc@global@numrow > 999}{%
      \PackageWarning{tikznoc}{Your NoC has more than 999
        nodes... seriously?}%
      \def\tikznoc@split@at{3}%
    }{%
      \def\tikznoc@split@at{3}%
    }
  }%
}%
%    \end{macrocode}
% Split the index at the position calculated before.
%    \begin{macrocode}
\StrSplit{#2}{\tikznoc@split@at}{\tikznoc@split@row}{\tikznoc@split@col}%
%    \end{macrocode}
% Store the splitted parts in macros requested by the user.
%    \begin{macrocode}
\expandafter\edef\csname #3\endcsname{\tikznoc@split@row}%
\expandafter\edef\csname #4\endcsname{\tikznoc@split@col}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% Macro to convert router index ($n_{row}n_{col}$) to decimal number.\\
% Syntax: |\tikznocidtonum|\oarg{offset}\marg{router index}\marg{number macro name}
% \begin{macro}{\tikznocidtonum}
%    \begin{macrocode}
\newcount\tikznoc@numbers@start@value
\define@key[tikznoc]{ctrl}{numbersStartAt}[0]{\tikznoc@numbers@start@value=#1}%
\newcommand{\tikznocidtonum}[3][0]{%
%    \end{macrocode}
% Split the router id into row and column indices.
%    \begin{macrocode}
\tikznocsplitid{#2}{tikznoc@idtonum@row}{tikznoc@idtonum@col}%
%    \end{macrocode}
% Calculate the number of the router.
%    \begin{macrocode}
\newcount\tikznoc@idtonum@cntA
\tikznoc@idtonum@cntA=\tikznoc@global@numcol
\multiply\tikznoc@idtonum@cntA by \tikznoc@idtonum@row
\advance\tikznoc@idtonum@cntA by \tikznoc@idtonum@col
\advance\tikznoc@idtonum@cntA by \tikznoc@numbers@start@value
\advance\tikznoc@idtonum@cntA by #1
%    \end{macrocode}
% Assign the number to the macro name requested.
%    \begin{macrocode}
\expandafter\edef\csname #3\endcsname{\the\tikznoc@idtonum@cntA}%\tikznoc@ctrl@numberFormat
}%
%    \end{macrocode}
% \end{macro}
%
% Macro to convert the decimal number of a router to its index ($n_{row}n_{col}$).\\
% Syntax: |\tikznocnumtoid|\oarg{first index offset}\marg{router number}\marg{router index
% macro name}
% \begin{macro}{\tikznocnumtoid}
%    \begin{macrocode}
\newcommand{\tikznocnumtoid}[3][0]{%
%    \end{macrocode}
% Initialize main counter. Subtract 1 to avoid corners being assigned to
% the next row.
%    \begin{macrocode}
\newcount\tikznoc@numtoid@numA
\tikznoc@numtoid@numA=#2
\advance\tikznoc@numtoid@numA by -1
%    \end{macrocode}
% Initialize column counter.
%    \begin{macrocode}
\newcount\tikznoc@numtoid@col
\tikznoc@numtoid@col=\tikznoc@global@numcol
%    \end{macrocode}
% Initialize secondary auxiliary counter.
%    \begin{macrocode}
\newcount\tikznoc@numtoid@numB
%    \end{macrocode}
% Get the row index.
%    \begin{macrocode}
\divide\tikznoc@numtoid@numA by \tikznoc@numtoid@col
\tikznoc@numtoid@numB=\tikznoc@numtoid@numA
\advance\tikznoc@numtoid@numB by #1
\expandafter\edef\csname #3\endcsname{\the\tikznoc@numtoid@numB}%
%    \end{macrocode}
% Reinitialize the auxiliary counter.
%    \begin{macrocode}
\tikznoc@numtoid@numB=#2
\multiply\tikznoc@numtoid@numB by -1
%    \end{macrocode}
% Get the column index.
%    \begin{macrocode}
\multiply\tikznoc@numtoid@numA by \tikznoc@numtoid@col
\advance\tikznoc@numtoid@numA by \tikznoc@numtoid@numB
\multiply\tikznoc@numtoid@numA by -1
\advance\tikznoc@numtoid@numA by -1
\advance\tikznoc@numtoid@numA by #1
%    \end{macrocode}
% Assign the number to user request macro name.
%    \begin{macrocode}
\expandafter\edef\csname #3\endcsname{\csname #3\endcsname\the\tikznoc@numtoid@numA}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% ID printing.\\
% Syntax: |\tikznocprintid|\oarg{}\marg{router index}
% \begin{macro}{\tikznocprintid}
% Define number text style options as passing the commands directly did not
% work.
%
% The text size goes first.
%    \begin{macrocode}
\define@choicekey+[tikznoc]{ctrl}{numberSize}[\val\nr]{%
  tiny,scriptsize,footnotesize,small,normalsize,%
  large,Large,LARGE,huge,Huge}%
[normalsize]{\edef\tikznoc@numberSize{\nr}}{%
  \PackageWarning{tikznoc}{Unknown text size.}\edef\tikznoc@numberSize{4}}%
%    \end{macrocode}
% Then the font.
%    \begin{macrocode}
\define@choicekey+[tikznoc]{ctrl}{numberFont}[\val\nr]{%
  textnormal,emph,textrm,textsf,texttt,textup,%
  textit,textsl,textsc,uppercase,textbf,textmd,textlf}%
[textnormal]{\edef\tikznoc@numberFont{\nr}}{%
  \PackageWarning{tikznoc}{Unknown text font.}\edef\tikznoc@numberFont{0}}%
%    \end{macrocode}
% Finally, set the default using |\tikznocset|.
%    \begin{macrocode}
\tikznocset{numbersStartAt,numberSize,numberFont}%
%    \end{macrocode}
%
% Start the print id macro definition.
%    \begin{macrocode}
\newcommand{\tikznocprintid}[2][0]{%
\ifthenelse{\equal{#2}{reprint}}{%
\newcount\tikznoc@printid@row
\newcount\tikznoc@printid@col
\tikznoc@printid@row=#1
\tikznoc@printid@col=#1
\whiledo{\the\tikznoc@printid@row < \tikznoc@global@numrow}{%
  \whiledo{\the\tikznoc@printid@col < \tikznoc@global@numcol}{%
    \tikznocprintid{\the\tikznoc@printid@row\the\tikznoc@printid@col}
    \advance\tikznoc@printid@col by 1
  }%
    \advance\tikznoc@printid@row by 1
    \tikznoc@printid@col=#1
}%
}{%
%    \end{macrocode}
% Show the node id (row/column).
%    \begin{macrocode}
  \iftikznoc@ctrl@showid
    \path (r#2c) node {#2};%
  \fi
%    \end{macrocode}
% Show a node number. First retrieve it from the node id.
%    \begin{macrocode}
  \iftikznoc@ctrl@shownumber
    \tikznocidtonum{#2}{tikznoc@printid@nodetext}%
%    \end{macrocode}
% Then apply the options (font size and font family).
%    \begin{macrocode}
    \path (r#2c) node {{%
      \ifcase\tikznoc@numberSize\relax
        \tiny\or\scriptsize\or\footnotesize\or\small\or\normalsize\or%
        \large\or\Large\or\LARGE\or\huge\or\Huge%
      \fi
      \ifcase\tikznoc@numberFont\relax
        \tikznoc@printid@nodetext
        \or\emph{\tikznoc@printid@nodetext}%
        \or\textrm{\tikznoc@printid@nodetext}%
        \or\textsf{\tikznoc@printid@nodetext}%
        \or\texttt{\tikznoc@printid@nodetext}%
        \or\textup{\tikznoc@printid@nodetext}%
        \or\textit{\tikznoc@printid@nodetext}%
        \or\textsl{\tikznoc@printid@nodetext}%
        \or\textsc{\tikznoc@printid@nodetext}%
        \or\uppercase{\tikznoc@printid@nodetext}%
        \or\textbf{\tikznoc@printid@nodetext}%
        \or\textmd{\tikznoc@printid@nodetext}%
        \or\textlf{\tikznoc@printid@nodetext}%
      \fi
    }};%
  \fi
}
}%
%    \end{macrocode}
% \end{macro}
%
%
%
% Router coloring macro.\\
% Syntax: |\tikznocColorRouters|\oarg{seperator}\marg{router indices separated by comma}\marg{color}
% \begin{macro}{\tikznocColorRouters}
%    \begin{macrocode}
\newcommand{\tikznocColorRouters}[3][,]{%
%    \end{macrocode}
%
% 'Parse' input.
% Loop through second argument as long as it is not empty:
%    \begin{macrocode}
\def\tikznoc@split@behind{#2}%
\whiledo{\NOT\equal{\tikznoc@split@behind}{}}{%
%    \end{macrocode}
%
% If the separator specified by optional argument is part of second
% argument, split the string at the first otikznoc@numtoid@colurrence.
%    \begin{macrocode}
  \IfSubStr{\tikznoc@split@behind}{#1}{%
    \StrBefore{\tikznoc@split@behind}{#1}[\tikznoc@split@before]%
    \StrBehind{\tikznoc@split@behind}{#1}[\tikznoc@split@behind]%
  }{%
%    \end{macrocode}
%
% If the separator is not found, store the input and set the iteration
% string to the empty string.
%    \begin{macrocode}
    \edef\tikznoc@split@before{\tikznoc@split@behind}%
    \def\tikznoc@split@behind{}%
  }%
%    \end{macrocode}
%
% For every extracted index, fill the node with the color provided by
% the third argument. Also, reprint the number or index.
%    \begin{macrocode}
  \path[draw,fill=#3] (r\tikznoc@split@before sw) rectangle (r\tikznoc@split@before ne);%
  \tikznocprintid{\tikznoc@split@before}%
}
}%
%    \end{macrocode}
% \end{macro}
%
%
%
% Interface macro for 'draw at every router'.\\
% Syntax: |\drawateveryrouter|\marg{COMMANDS}.
% \begin{macro}{\drawateveryrouter}
% This command merely redefines the internal macro.
%    \begin{macrocode}
\newcommand{\drawateveryrouter}[2][]{%
\def\tikznoc@draw@at@every@router{#2}}%
%    \end{macrocode}
% \end{macro}
%
%
% Interface macro to draw something at one specific router.\\
% Syntax: |\drawatrouter|\marg{RowColIdx}\marg{COMMANDS}
% \begin{macro}{\drawateveryrouter}
% This macro redefines the coordinate shortcuts for the current router
% such that they can be used in the drawing commands.
%    \begin{macrocode}
\newcommand{\drawatrouter}[3][]{%
%    \end{macrocode}
%
% Redefine coordinates.
%    \begin{macrocode}
\path (r#2c)  coordinate(useC)%
  (r#2sw) coordinate(useSW)%
  (r#2s)  coordinate(useS)%
  (r#2se) coordinate(useSE)%
  (r#2e)  coordinate(useE)%
  (r#2ne) coordinate(useNE)%
  (r#2n)  coordinate(useN)%
  (r#2nw) coordinate(useNW)%
  (r#2w)  coordinate(useW)%
;%
%    \end{macrocode}
%
% Execute COMMAND and terminate macro.
%    \begin{macrocode}
{#3}}
%    \end{macrocode}
% \end{macro}
%
%
% Macro to draw a tile at a router.\\
% Syntax: |\tikznoctile|\oarg{tile style}\marg{router index}
% \begin{macro}{\tikznoctile}
%    \begin{macrocode}
\newcommand{\tikznoctile}[2][tile]{%
\path (r#2c) -- ++(-0.5,0.5) node[tile,#1] (t#2) {};
\iftikznoc@ctrl@connectTile
  \draw (r#2nw) -- (t#2);
\fi
}%
%    \end{macrocode}
% \end{macro}
%
%
% Surround a NoC with partly links to indicate it is part of a bigger
% NoC.\\
% Syntax: |\tikznocembed|\oarg{}\marg{$r$}\marg{$c$}
% \begin{macro}{\tikznocembed}
%    \begin{macrocode}
\newcommand{\tikznocembed}[3][]{%
%    \end{macrocode}
%
% Horizontal extensions.
%    \begin{macrocode}
  \foreach \k in {1,...,#2} {%
    \draw (\k-1+0.25,0.5) -- ++(0,0.25);
    \draw (\k-1+0.25,-#3+1) -- ++(0,-0.25);
  }
%    \end{macrocode}
%
% Vertical extensions.
%    \begin{macrocode}
  \foreach \k in {1,...,#3} {%
    \draw (0,1-\k+0.25) -- ++(-0.25,0);
    \draw (#2-0.5,1-\k+0.25) -- ++(0.25,0);
  }
}
%    \end{macrocode}
% \end{macro}
%
%
% Macro to connect two routers by a route.\\
% Syntax: |\tikznocRoute|%
% \oarg{route key-val}\oarg{tikz scope key-val}%
% \marg{source-id}\oarg{*}\oarg{source key-val}%
% \marg{sink-id}\oarg{*}\oarg{sink key-val}
% \begin{macro}{\tikznocRoute}
% Define style used for connecting routers.
%    \begin{macrocode}
\tikzset{route/.style={->}}%
%    \end{macrocode}
% Prepare connection style.  Currently, only xy, yx, and direct connections are
% supported.
%    \begin{macrocode}
\newif\iftikznoc@route@style@xy\tikznoc@route@style@xyfalse%
\newif\iftikznoc@route@style@yx\tikznoc@route@style@yxfalse%
\newif\iftikznoc@route@style@direct\tikznoc@route@style@directfalse%
\define@choicekey[tikznoc]{route}{style}[\val\nr]{xy,yx,direct}[xy]{%
  \ifcase\nr\relax
    \tikznoc@route@style@xytrue%
    \tikznoc@route@style@yxfalse%
    \tikznoc@route@style@directfalse%
  \or
    \tikznoc@route@style@xyfalse%
    \tikznoc@route@style@yxtrue%
    \tikznoc@route@style@directfalse%
  \or
    \tikznoc@route@style@xyfalse%
    \tikznoc@route@style@yxfalse%
    \tikznoc@route@style@directtrue%
  \fi
}%
\define@key[tikznoc]{route}{direct}[]{\setkeys[tikznoc]{route}{style=direct}}%
\define@key[tikznoc]{route}{xy}[]{\setkeys[tikznoc]{route}{style=xy}}%
\define@key[tikznoc]{route}{yx}[]{\setkeys[tikznoc]{route}{style=yx}}%
%    \end{macrocode}
% Offset amount interface.
% First define the offset macros used later.
%    \begin{macrocode}
\define@cmdkeys[tikznoc]{routeSource}{xoffset,yoffset}[0.075]%
\define@cmdkeys[tikznoc]{routeSink}{xoffset,yoffset}[0.075]%
%    \end{macrocode}
% Define interface to set them jointly.
%    \begin{macrocode}
\define@cmdkey[tikznoc]{routeSource}{offset}{%
  \setkeys[tikznoc]{routeSource}{xoffset=#1,yoffset=#1}}%
\define@cmdkey[tikznoc]{routeSink}{offset}{%
  \setkeys[tikznoc]{routeSink}{xoffset=#1,yoffset=#1}}%
%    \end{macrocode}
% Add route family interface.  Common (source and sink) x and y offset
% assignment.
%    \begin{macrocode}
\define@cmdkey[tikznoc]{route}{xoffset}[0.075]{%
  \setkeys+[tikznoc]{routeSource,routeSink}{xoffset=#1}}%
\define@cmdkey[tikznoc]{route}{yoffset}[0.075]{%
  \setkeys+[tikznoc]{routeSource,routeSink}{yoffset=#1}}%
%    \end{macrocode}
% Extend route family interface by global offset assignment.
%    \begin{macrocode}
\define@cmdkey[tikznoc]{route}{offset}[0.075]{%
  \setkeys[tikznoc]{route}{xoffset={#1},yoffset={#1}}%
}%
%    \end{macrocode}
% Assign default global offset once.
%    \begin{macrocode}
\setkeys[tikznoc]{route}{offset}%
%    \end{macrocode}
% Source and sink offset aliases.
%
% First define source placement aliases.
%    \begin{macrocode}
\def\tikznoc@route@sourceoffset{}%
\define@key[tikznoc]{routeSource}{none}[]{%
  \def\tikznoc@route@sourceoffset{0,0}}%
\define@key[tikznoc]{routeSource}{above}[]{%
  \def\tikznoc@route@sourceoffset{0, +\cmdtikznoc@routeSource@yoffset}}%
\define@key[tikznoc]{routeSource}{below}[]{%
  \def\tikznoc@route@sourceoffset{0, -\cmdtikznoc@routeSource@yoffset}}%
\define@key[tikznoc]{routeSource}{left}[]{%
  \def\tikznoc@route@sourceoffset{-\cmdtikznoc@routeSource@xoffset, 0}}%
\define@key[tikznoc]{routeSource}{right}[]{%
  \def\tikznoc@route@sourceoffset{+\cmdtikznoc@routeSource@xoffset, 0}}%
\define@key[tikznoc]{routeSource}{above left}[]{%
  \def\tikznoc@route@sourceoffset{%
    -\cmdtikznoc@routeSource@xoffset, +\cmdtikznoc@routeSource@yoffset}}%
\define@key[tikznoc]{routeSource}{above right}[]{%
  \def\tikznoc@route@sourceoffset{%
    +\cmdtikznoc@routeSource@xoffset, +\cmdtikznoc@routeSource@yoffset}}%
\define@key[tikznoc]{routeSource}{below left}[]{%
  \def\tikznoc@route@sourceoffset{%
    -\cmdtikznoc@routeSource@xoffset, -\cmdtikznoc@routeSource@yoffset}}%
\define@key[tikznoc]{routeSource}{below right}[]{%
  \def\tikznoc@route@sourceoffset{%
    +\cmdtikznoc@routeSource@xoffset, -\cmdtikznoc@routeSource@yoffset}}%
%    \end{macrocode}
% Add route family interface.
%    \begin{macrocode}
\define@choicekey[tikznoc]{route}{source offset}[\val\nr]{%
  none,%
  above,%
  below,%
  left,%
  right,%
  above left,%
  above right,%
  below left,%
  below right%
}[none]{\setkeys[tikznoc]{routeSource}{\val}}%
%    \end{macrocode}
% Next define sink placement aliases.
%    \begin{macrocode}
\def\tikznoc@route@sinkoffset{}%
\define@key[tikznoc]{routeSink}{none}[]{%
  \def\tikznoc@route@sinkoffset{0,0}}%
\define@key[tikznoc]{routeSink}{above}[]{%
  \def\tikznoc@route@sinkoffset{0, +\cmdtikznoc@routeSink@yoffset}}%
\define@key[tikznoc]{routeSink}{below}[]{%
  \def\tikznoc@route@sinkoffset{0, -\cmdtikznoc@routeSink@yoffset}}%
\define@key[tikznoc]{routeSink}{left}[]{%
  \def\tikznoc@route@sinkoffset{-\cmdtikznoc@routeSink@xoffset, 0}}%
\define@key[tikznoc]{routeSink}{right}[]{%
  \def\tikznoc@route@sinkoffset{+\cmdtikznoc@routeSink@xoffset, 0}}%
\define@key[tikznoc]{routeSink}{above left}[]{%
  \def\tikznoc@route@sinkoffset{-\cmdtikznoc@routeSink@xoffset, +\cmdtikznoc@routeSink@yoffset}}%
\define@key[tikznoc]{routeSink}{above right}[]{%
  \def\tikznoc@route@sinkoffset{+\cmdtikznoc@routeSink@xoffset, +\cmdtikznoc@routeSink@yoffset}}%
\define@key[tikznoc]{routeSink}{below left}[]{%
  \def\tikznoc@route@sinkoffset{-\cmdtikznoc@routeSink@xoffset, -\cmdtikznoc@routeSink@yoffset}}%
\define@key[tikznoc]{routeSink}{below right}[]{%
  \def\tikznoc@route@sinkoffset{+\cmdtikznoc@routeSink@xoffset, -\cmdtikznoc@routeSink@yoffset}}%
%    \end{macrocode}
% Add route family interface for the sink options.
%    \begin{macrocode}
\define@choicekey[tikznoc]{route}{sink offset}[\val\nr]{%
  none,%
  above,%
  below,%
  left,%
  right,%
  above left,%
  above right,%
  below left,%
  below right%
}[none]{\setkeys[tikznoc]{routeSink}{\val}}%
%    \end{macrocode}
%
% Connection route macro.
%    \begin{macrocode}
\DeclareDocumentCommand{\tikznocRoute}{ o O{} m s o m s o }{%
%    \end{macrocode}
% Assign defaults.
%    \begin{macrocode}
  \setkeys[tikznoc]{route}{style, source offset, sink offset}%
%    \end{macrocode}
%  Process user inputs.  Start with global arguments
%    \begin{macrocode}
  \IfNoValueTF{#1}{}{\setkeys[tikznoc]{route}{#1}}%
  \IfNoValueTF{#5}{}{\setkeys[tikznoc]{routeSource}{#5}}%
  \IfNoValueTF{#8}{}{\setkeys[tikznoc]{routeSink}{#8}}%
%    \end{macrocode}
% Define alias coordinates for the routers used to connect.
%    \begin{macrocode}
  \path (r#3c) ++ (\tikznoc@route@sourceoffset) coordinate (tikznocRouteFrom);%
  \path (r#6c) ++ (\tikznoc@route@sinkoffset) coordinate (tikznocRouteTo);%
%    \end{macrocode}
% Define alias coordinates for the tiles based on the star options.
% The star variants use the same offset for the tiles as for the routers.
%    \begin{macrocode}
\IfBooleanTF{#4}{%
  \path (t#3.center) ++ (\tikznoc@route@sourceoffset) coordinate (tikznocRouteFromTile);%
}{}%
\IfBooleanTF{#7}{%
  \path (t#6.center) ++ (\tikznoc@route@sinkoffset) coordinate (tikznocRouteToTile);%
}{}%
%    \end{macrocode}
% Switch between the three connection styles.  If star variant, make a straight
% connection to the router coordinates first (and last).
%    \begin{macrocode}
  \begin{scope}[#2]%
    \draw[route]
      \IfBooleanTF{#4}{(tikznocRouteFromTile) --}{}%
      \iftikznoc@route@style@xy
         (tikznocRouteFrom) -| (tikznocRouteTo)%
      \fi
      \iftikznoc@route@style@yx
         (tikznocRouteFrom) |- (tikznocRouteTo)%
      \fi
      \iftikznoc@route@style@direct
        (tikznocRouteFrom) -- (tikznocRouteTo)%
      \fi
      \IfBooleanTF{#7}{-- (tikznocRouteToTile)}{}%
    ;%
  \end{scope}
}%
%    \end{macrocode}
% \end{macro}
%
%
% Macro to connect two routers by a path specified by the hops.\\
% Syntax: |\tikznocPath|%
% \oarg{route key-val}\oarg{tikz scope key-val}%
% \marg{source-id}\oarg{source key-val}%
% \marg{sink-id}\oarg{sink key-val}
% \begin{macro}{\tikznocPath}
% Define style used for connecting routers.
%    \begin{macrocode}
\DeclareDocumentCommand{\tikznocPath}{ s s O{} m }{%
  \foreach \node [count=\K] in {#4} {};%

  \foreach \node [count=\k] in {#4} {%
    \ifnum\k>1
      \IfBooleanTF{#2}{%
        \draw[#3] (src) -- (r\node c);%
      }{%
        \IfBooleanTF{#1}{%
          \draw[->,#3] (src) -- (r\node c);%
        }{%
          \ifnum\k=\K
            \draw[->,#3] (src) -- (r\node c);%
          \else
            \draw[#3] (src) -- (r\node c);%
          \fi
        }%
      }%
    \fi
    \path (r\node c) coordinate (src);%
  }%
}%
%    \end{macrocode}
% \end{macro}
%
%
% MACRO TEMPLATE\\
% Syntax: |\tikznoc|\oarg{}\marg{}
% \begin{macro}{\tikznoc}
%    \begin{macrocode}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%
% \section{To Do}%
% \begin{itemize}
%   \item Maybe change the rectangle router generation using nodes
%     (and styles) instead of hard-coded rectangles
%   \item Make the edge numbers more modular with options controlling their
%     style
% \end{itemize}
%
%
%
% \iffalse ins meta-comment
%
% For convenience, the corresponding .ins file is provided here.
% Just copy this in a file called tikznoc.ins and run it through latex.
%
% %%
% %% Copyright (C) 2014 by Michael Vonbun <m.vonbun@gmail.com>
% %%
% %% This file may be distributed and/or modified under the conditions of
% %% the LaTeX Project Public License, either version 1.2 of this license
% %% or (at your option) any later version.  The latest version of this
% %% license is in:
% %%
% %%    http://www.latex-project.org/lppl.txt
% %%
% %% and version 1.2 or later is part of all distributions of LaTeX version
% %% 1999/12/01 or later.
% %%
%
% \input docstrip.tex
% \keepsilent
%
% \usedir{tex/latex/lisstyles/tikznoc}
%
% \preamble
%
% This is a generated file.
%
% Copyright (C) 2014 by Michael Vonbun <m.vonbun@gmail.com>
%
% This file may be distributed and/or modified under the conditions of
% the LaTeX Project Public License, either version 1.2 of this license
% or (at your option) any later version.  The latest version of this
% license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.2 or later is part of all distributions of LaTeX version
% 1999/12/01 or later.
%
% \endpreamble
%
% \generate{\file{tikznoc.sty}{\from{tikznoc.dtx}{package}}}
%
% \obeyspaces
% \Msg{*************************************************************}
% \Msg{*                                                           *}
% \Msg{* To finish the installation you have to move the following *}
% \Msg{* file into a directory searched by TeX:                    *}
% \Msg{*                                                           *}
% \Msg{*     tikznoc.sty                                           *}
% \Msg{*                                                           *}
% \Msg{* To produce the documentation run the file tikznoc.dtx     *}
% \Msg{* through LaTeX/pdfLaTeX.                                   *}
% \Msg{* To produce the changelog, run                             *}
% \Msg{*  makeindex -s gglo.ist -o tikznoc.gls tikznoc.glo         *}
% \Msg{* To produce the index, run                                 *}
% \Msg{*  makeindex -s gind.ist -o tikznoc.ind tikznoc.idx         *}
% \Msg{*                                                           *}
% \Msg{* gglo.ist and gind.ist are shipped with the doc-package    *}
% \Msg{*                                                           *}
% \Msg{* Happy TeXing!                                             *}
% \Msg{*                                                           *}
% \Msg{*************************************************************}
%
% \endbatchfile
%
% \fi
%
% \setcounter{IndexColumns}{2}
% \Finale \PrintChanges \PrintIndex
\endinput

% \endinput
% Local Variables:
% mode: doctex
% TeX-master: t
% End:
